"""
verify_exposure.py

A simple, direct script to verify the Python exposure implementation against
a baseline generated by the darktable GUI.

This script implements the "comparative experiment" workflow:
1.  Read a "before" image (`sample-origin.tif`) generated by darktable.
    This image is linear and has had basic raw processing, but no exposure.
2.  Process this image with our Python `Exposure` module.
3.  Read an "after" image (`sample-baseline.tif`) generated by darktable.
    This image is the "before" image with the target exposure settings applied.
4.  Compare our Python result with the "after" baseline to check for alignment.
"""
import os
import sys
import imageio.v2 as imageio
import numpy as np
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
from typing import cast

# --- Setup Paths ---

# Get the directory where this script is located
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
# Get the project root (which is one level up from the script's directory)
PROJECT_ROOT = os.path.dirname(SCRIPT_DIR)
# Add the project root to the Python path to allow for absolute imports
sys.path.append(PROJECT_ROOT)

from iop.exposure import Exposure

# --- Test Configuration ---

# The parameters used to generate the baseline in the darktable GUI
TEST_EXPOSURE_EV = 1.0
TEST_BLACK_LEVEL = 0.0

# Paths to the TIFF files, now relative to this script's location
ASSETS_DIR = os.path.join(SCRIPT_DIR, "test_assets", "exposure")
ORIGIN_IMAGE_PATH = os.path.join(ASSETS_DIR, "sample-origin.tif")
BASELINE_IMAGE_PATH = os.path.join(ASSETS_DIR, "sample-baseline.tif")
PYTHON_OUTPUT_PATH = os.path.join(ASSETS_DIR, "sample-python-output.tif")


def run_verification():
    """
    Executes the verification process.
    """
    print("--- Starting Exposure Module Verification ---")

    # 1. Load the "before" image (linear, no exposure applied)
    print(f"1. Loading origin image from: {ORIGIN_IMAGE_PATH}")
    if not os.path.exists(ORIGIN_IMAGE_PATH):
        print(f"ERROR: Origin image not found. Please ensure it exists.")
        return
        
    origin_image = imageio.imread(ORIGIN_IMAGE_PATH)
    
    # 2. Process the image with our Python exposure module
    print(f"2. Applying Python exposure module (Exposure: {TEST_EXPOSURE_EV}, Black: {TEST_BLACK_LEVEL})")
    exposure_module = Exposure(exposure_ev=TEST_EXPOSURE_EV, black_level=TEST_BLACK_LEVEL)
    python_processed_image = exposure_module.process(origin_image)

    # 3. Save the Python output for inspection
    print(f"3. Saving Python output to: {PYTHON_OUTPUT_PATH}")
    imageio.imwrite(PYTHON_OUTPUT_PATH, python_processed_image)
    
    # 4. Load the "after" baseline image from darktable
    print(f"4. Loading baseline image from: {BASELINE_IMAGE_PATH}")
    if not os.path.exists(BASELINE_IMAGE_PATH):
        print(f"ERROR: Baseline image not found. Please ensure it exists.")
        return

    baseline_image = imageio.imread(BASELINE_IMAGE_PATH)

    # 5. Compare the results
    print("5. Comparing Python output with darktable baseline...")
    
    # Ensure data types are consistent for comparison
    baseline_float = baseline_image.astype(np.float32)
    python_float = python_processed_image.astype(np.float32)

    # Calculate metrics
    data_range = np.max(baseline_float) - np.min(baseline_float)
    if data_range == 0:
        data_range = 1.0

    ssim_score = ssim(baseline_float, python_float, data_range=data_range, channel_axis=-1, win_size=7)
    psnr_score = psnr(baseline_float, python_float, data_range=data_range)

    print("\n--- Verification Report ---")
    print(f"  - PSNR: {psnr_score:.2f} dB")
    print(f"  - SSIM: {ssim_score:.4f}")
    print("---------------------------\n")

    # A high PSNR (e.g., > 60 dB) and SSIM very close to 1.0 indicates a near-perfect match.
    if psnr_score > 60 and cast(float, ssim_score) > 0.999:
        print("Verdict: SUCCESS! The Python implementation perfectly matches the darktable baseline.")
    else:
        print("Verdict: FAILED. The results do not match.")

if __name__ == "__main__":
    run_verification() 