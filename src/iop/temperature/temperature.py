import math
from PIL import Image

# CIE 1931 2度标准观察者 色匹配函数 (380nm-780nm, 每步10nm) 的简化表
# 为简化，我们这里只列出部分波长点的 (xbar, ybar, zbar) 数据以近似计算
cie_xyz_table = [
    # wavelength (nm), xbar, ybar, zbar  (数据来源: CIE 1931)
    (380, 0.0014, 0.0000, 0.0065),
    (390, 0.0042, 0.0001, 0.0201),
    (400, 0.0143, 0.0004, 0.0679),
    (410, 0.0435, 0.0012, 0.2074),
    (420, 0.1344, 0.0040, 0.6456),
    (430, 0.2839, 0.0116, 1.3856),
    (440, 0.3483, 0.0230, 1.7471),
    (450, 0.3362, 0.0380, 1.7721),
    (460, 0.2908, 0.0600, 1.6692),
    (470, 0.1954, 0.0910, 1.2876),
    (480, 0.0956, 0.1390, 0.8120),
    (490, 0.0320, 0.2080, 0.4652),
    (500, 0.0049, 0.3230, 0.2720),
    (510, 0.0093, 0.5030, 0.1582),
    (520, 0.0633, 0.7100, 0.0782),
    (530, 0.1655, 0.8620, 0.0422),
    (540, 0.2904, 0.9540, 0.0203),
    (550, 0.4334, 0.9949, 0.0087),
    (560, 0.5945, 0.9950, 0.0039),
    (570, 0.7621, 0.9520, 0.0021),
    (580, 0.9163, 0.8700, 0.0011),
    (590, 1.0263, 0.7570, 0.0005),
    (600, 1.0622, 0.6310, 0.0003),
    (610, 1.0026, 0.5030, 0.0002),
    (620, 0.8544, 0.3810, 0.0001),
    (630, 0.6424, 0.2650, 0.0000),
    (640, 0.4479, 0.1750, 0.0000),
    (650, 0.2835, 0.1070, 0.0000),
    (660, 0.1649, 0.0610, 0.0000),
    (670, 0.0874, 0.0320, 0.0000),
    (680, 0.0468, 0.0170, 0.0000),
    (690, 0.0227, 0.0082, 0.0000),
    (700, 0.0114, 0.0041, 0.0000),
    (710, 0.0058, 0.0021, 0.0000),
    (720, 0.0029, 0.0010, 0.0000),
    (730, 0.0014, 0.0005, 0.0000),
    (740, 0.0007, 0.0003, 0.0000),
    (750, 0.0003, 0.0002, 0.0000),
    (760, 0.0002, 0.0001, 0.0000),
    (770, 0.0001, 0.0000, 0.0000),
    (780, 0.0000, 0.0000, 0.0000),
]
# 为提高精度，我们也可以增加采样点或使用权威CIE表格，但此处为演示从略。

# 普朗克常数、光速、波尔兹曼常数计算黑体辐射常数
h = 6.62607015e-34  # Planck常数 (J·s)
c = 2.99792458e8    # 光速 (m/s)
k_B = 1.380649e-23  # 波尔兹曼常数 (J/K)
c1 = 2 * math.pi * h * c**2      # 辐射常数c1
c2 = (h * c) / k_B              # 辐射常数c2

def spectral_radiance_blackbody(wavelength_m, T):
    """计算黑体在温度T时波长为wavelength_m (米)处的光谱辐射出射度（相对值）"""
    # 普朗克黑体公式:
    # M(λ) = c1 / [λ^5 * (exp(c2/(λ*T)) - 1)]
    lam = wavelength_m
    exponent = c2 / (lam * T)
    # 防止指数溢出:
    if exponent > 700:  # 非常高的指数会导致math.exp溢出，>700近似认为光强≈0
        return 0.0
    value = c1 / ( (lam**5) * (math.exp(exponent) - 1.0) )
    return value

def compute_XYZ_from_spectrum(tempK, use_daylight_model=True):
    """给定色温tempK，计算光源的近似XYZ值。use_daylight_model表示是否对>=4000K使用日光模型"""
    # 初始化累积值
    X = Y = Z = 0.0
    # 选取适当的光谱函数
    if use_daylight_model and tempK >= 4000:
        # 使用标准日光D系列光源的组合模型
        # 先计算chromaticity (x_D, y_D) 对应色温的色品坐标:
        if 4000 <= tempK <= 7000:
            x_D = (-4.6070e9 / (tempK**3)) + (2.9678e6 / (tempK**2)) + (0.09911e3 / tempK) + 0.244063
        elif 7000 < tempK <= 25000:
            x_D = (-2.0064e9 / (tempK**3)) + (1.9018e6 / (tempK**2)) + (0.24748e3 / tempK) + 0.237040
        else:
            # 超出范围则不使用模型
            x_D = 0.3127;  # 默认接近D65
        # 根据日光色品曲线计算y:
        y_D = -3.000*(x_D**2) + 2.870*x_D - 0.275
        # 将chromaticity (x_D, y_D) 转换成相对XYZ, 取Y=1
        if y_D == 0:
            # 避免除零
            X = Y = Z = 0.0
        else:
            X = x_D / y_D
            Y = 1.0
            Z = (1 - x_D - y_D) / y_D
        return (X, Y, Z)
    else:
        # 使用黑体辐射模型计算（适用于低色温或总体Planckian光源）
        for i in range(len(cie_xyz_table)-1):
            wl, xbar, ybar, zbar = cie_xyz_table[i]
            wl_next = cie_xyz_table[i+1][0]
            # 用当前区间的中心波长近似
            wavelength = (wl + wl_next) / 2.0
            # 单位转换nm->m
            lam_m = wavelength * 1e-9
            # 计算黑体在此波长的强度
            P = spectral_radiance_blackbody(lam_m, tempK)
            # 累加XYZ (使用矩形积分法)
            X += P * xbar
            Y += P * ybar
            Z += P * zbar
        # 注意：这里步距较大仅作演示，精度有限，可使用更细步长积分提高准确度
        # 归一化XYZ，使Y=1（或最大值=1）。通常我们以Y为基准:
        if Y == 0:
            return (0.0, 0.0, 0.0)
        X /= Y
        Z /= Y
        Y = 1.0
        return (X, Y, Z)

def calculate_wb_coeffs(tempK, tint=1.0):
    """根据色温和色调计算白平衡的RGB增益系数 (R_gain, G_gain, B_gain)。"""
    # 1. 计算光源的相对XYZ值
    X, Y, Z = compute_XYZ_from_spectrum(tempK, use_daylight_model=True)
    # 2. 应用色调Tint调整：相当于在XYZ空间拉伸绿色分量
    if tint != 0:
        Y = Y / tint
    # 3. 将XYZ转换为RGB增益系数。
    #    为方便，假设相机RGB对XYZ响应类似sRGB的基色（近似），以绿通道为基准。
    #    这里采用：把Y归一为1后，R系数 = Y/X，G系数 = 1，B系数 = Y/Z
    if X == 0 or Z == 0:
        # 避免除零，若出现则返回默认系数
        return (1.0, 1.0, 1.0)
    R_gain = Y / X
    G_gain = 1.0      # 绿通道作为基准1.0
    B_gain = Y / Z
    return (R_gain, G_gain, B_gain)

def main():
    # 示例1：手动输入色温和色调
    tempK = float(input("请输入色温（单位K，例如6500）："))
    tint = float(input("请输入色调（tint，通常为1.0，偏绿>1，偏品红<1）："))
    r, g, b = calculate_wb_coeffs(tempK, tint)
    print(f"色温 {tempK}K, 色调 {tint} -> 白平衡系数: R={r:.3f}, G={g:.3f}, B={b:.3f}")

    # 示例2：批量测试常见色温
    print("\n常见色温下的白平衡系数：")
    for t in [2800, 3200, 4000, 5000, 6500, 7500, 10000]:
        r, g, b = calculate_wb_coeffs(t, tint=1.0)
        print(f"色温 {t}K -> R={r:.3f}, G={g:.3f}, B={b:.3f}")

if __name__ == "__main__":
    main()